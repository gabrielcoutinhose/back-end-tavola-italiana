name: Build and Deploy Backend

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - "5432:5432"
        # options: >-
        #   --health-cmd="pg_isready -U postgres"
        #   --health-interval=10s
        #   --health-timeout=5s
        #   --health-retries=3
      mongo:
        image: mongo:4
        ports:
          - "27017:27017"
        # options: >-
        #   --health-cmd="echo 'db.runCommand({ ping: 1 })' | mongo --quiet"
        #   --health-interval=10s
        #   --health-timeout=5s
        #   --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "22"

      - name: Install Dependencies
        run: yarn install

      - name: Create .env.production file
        run: |
          echo "NODE_ENV=production" > .env.production
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.production
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.production
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env.production
          echo "MONGO_URI=mongodb://mongo-db:27017/${{ secrets.MONGO_DB }}" >> .env.production

      - name: Build Docker Image for Production
        run: docker build -t backend:prod --build-arg NODE_ENV=production .

      - name: Run Backend in Production Mode
        run: |
          docker run -d --name backend-prod \
            --link postgres:postgres-db \
            --link mongo:mongo-db \
            --env-file .env.production \
            -p 8080:8080 backend:prod

      - name: Run Production Tests
        run: curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:8080 || exit 1

      # - name: Notify Slack
      #   uses: rtCamp/action-slack-notify@v2
      #   with:
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     message: "Build and Deploy completed successfully!"

      - name: Clean up
        run: |
          docker stop backend-prod || true
          docker rm backend-prod || true
          docker rmi backend:prod || true
